name: 'Terraform-apply'

on:
  push:
    branches:
      - master
     
 
jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest 
   
        
    steps:
    # Checkout the repository 
    - name: Checkout code
      uses: actions/checkout@v2

    # Install nodejs
    - uses: actions/setup-node@v2
      with:
          node-version: '16'
          
    # Install Terraform CLI and configure the Terraform CLI configuration file
    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v1
  
    # Initialize working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      id: init
      run: terraform init 

    
    # Checks that all Terraform configuration files adhere to a canonical format and style
    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
    
    # Validates the configuration
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
  
    # Evaluates and generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color
    
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
      # On push to master, build or change infrastructure according to Terraform configuration files
    - name: Terraform Apply
      id: apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: '.'
        AWS_ACCESS_KEY_ID:  ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY:  ${{ secrets.AWS_SECRET_ACCESS_KEY }}
